/*
 * Author: Zhanliang Liu
 */

#include "number.en.grammar"

// for local grammars that come from regex tagger
<number> = <numeric> {nf.math.to_number($1)};

<special_number> = "pair"    {nf.I(2)}
                 | "couple"  {nf.I(2)}
                 | "dozen"   {nf.I(12)}
                 | "percent" {nf.I(0.01)}
                 ;
<number> = <special_number>          {nf.I($1)}
         | <number> <special_number> {nf.math.mul($1,$2)}
         ;

<number> = <number> "plus" <number>         {nf.math.sum($1,$3)}
         | <number> "added to" <number>     {nf.math.sum($3, $1)}
         | "sum of" <number> "and" <number> {nf.math.sum($2,$4)}
         | "the sum of" <number> "and" <number> {nf.math.sum($2,$4)}
         ;

<number> = <number> "minus" <number>           {nf.math.sub($1,$3)}
         | "subtract" <number> "from" <number> {nf.math.sub($4,$2)}
         | "deduct" <number> "from" <number>   {nf.math.sub($4,$2)}
         | <number> "subtracted from" <number> {nf.math.sub($3,$1)}
         ;

<number> = <number> "divides" <number>    {nf.math.div($3,$1)}
         | <number> "divided by" <number> {nf.math.div($1,$3)}
         | <number> "over" <number>       {nf.math.div($1,$3)}
         ;

<number> = <number> "times" <number>            {nf.math.mul($1,$3)}
         | <number> "multiply by" <number>      {nf.math.mul($1,$3)}
         | "multiply" <number> "by" <number>    {nf.math.mul($2,$4)}
         | "product of" <number> "and" <number> {nf.math.mul($2,$4)}
         | "half of" <number>                   {nf.math.mul($2,0.5)}
         ;

<number> = <number> "raised to the power of" <number>    {nf.math.pow($1,$3)}
         | <number> "raised to the exponent of" <number> {nf.math.pow($1,$3)}
         | "square of" <number>      {nf.math.pow($2,2)}
         | "cube of" <number>        {nf.math.pow($2,3)}
         | "square root of" <number> {nf.math.pow($2,0.5)}
         | "cubic root of" <number>  {nf.math.pow($2,nf.math.div(1,3))}
         ;

<equ> = <number> "be equal to" <number> {vf.be.equ($1,$2)}
      | <number> "equal" <number>       {vf.be.equ($1,$2)}
      | <number> "be" <number>          {vf.be.equ($1,$2)}
      ;

